;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(setq user-full-name "Vitaly Ankh"
      user-mail-address "vitalyankh@gmail.com")

(cond (IS-MAC
       (setq mac-command-modifier      'meta
             mac-option-modifier       'alt
             mac-right-option-modifier 'alt)))

(setq kill-whole-line t)

;;(setq ivy-use-selectable-prompt t)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

(setq auto-save-default t
      make-backup-files t)

(setq confirm-kill-emacs nil)

(let ;;((alternatives '("doom-emacs-bw-light.svg")))
    ((alternatives '("doom-emacs-color.png" "doom-emacs-bw-light.svg")))
  (setq fancy-splash-image
        (concat doom-private-dir "splash/"
                (nth (random (length alternatives)) alternatives))))

(setq doom-font (font-spec :family "mononoki" :weight 'light :size 22)
      doom-variable-pitch-font (font-spec :family "CMU Typewriter Text" :size 22)
      doom-serif-font (font-spec :family "CMU Typewriter Text" :size 22)
      ;;doom-variable-pitch-font (font-spec :family "Noto Serif CJK SC Light" :size 24)
      doom-unicode-font (font-spec :family "Noto Serif CJK SC" :weight 'light :size 21)
      doom-big-font (font-spec :family "Noto Serif CJK SC" :weight 'light :size 25))
;;(set-fontset-font t 'unicode "Noto Serif CJK SC" nil 'prepend)

(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(setq mixed-pitch-variable-pitch-cursor nil)

;;(setq doom-theme 'tango)
(setq doom-theme 'doom-solarized-light)
(use-package doom-themes
  :config
  ;;Global settings (defaults)
  (setq doom-themes-enable-bold nil    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

(add-hook 'window-setup-hook #'doom/quickload-session)

(add-to-list 'initial-frame-alist '(fullscreen . maximized))

(rainbow-mode)

(use-package sis
  ;;:hook
  ;; enable the /follow context/ and /inline region/ mode for specific buffers
  ;;(((text-mode prog-mode) . sis-context-mode)
  ;; ((text-mode prog-mode) . sis-inline-mode))


  :config
  (sis-ism-lazyman-config "1" "2" 'fcitx5)
  ;; enable the /cursor color/ mode
  (sis-global-cursor-color-mode t)
  ;; enable the /respect/ mode
  (sis-global-respect-mode t)
  ;; enable the /follow context/ mode for all buffers
  (sis-global-context-mode t)
  ;; enable the /inline english/ mode for all buffers
  ;; (sis-global-inline-mode t)
  )

;;(map! "C-x b"   #'counsel-buffer-or-recentf
;;      "C-x C-b" #'counsel-switch-buffer)

(defun zz/counsel-buffer-or-recentf-candidates ()
  "Return candidates for `counsel-buffer-or-recentf'."
  (require 'recentf)
  (recentf-mode)
  (let ((buffers
         (delq nil
               (mapcar (lambda (b)
                         (when (buffer-file-name b)
                           (abbreviate-file-name (buffer-file-name b))))
                       (delq (current-buffer) (buffer-list))))))
    (append
     buffers
     (cl-remove-if (lambda (f) (member f buffers))
                   (counsel-recentf-candidates)))))

(advice-add #'counsel-buffer-or-recentf-candidates
            :override #'zz/counsel-buffer-or-recentf-candidates)

(use-package! switch-buffer-functions
  :after recentf
  :preface
  (defun my-recentf-track-visited-file (_prev _curr)
    (and buffer-file-name
         (recentf-add-file buffer-file-name)))
  :init
  (add-hook 'switch-buffer-functions #'my-recentf-track-visited-file))

;;(map! "C-s" #'counsel-grep-or-swiper)
(map! "C-s" #'+default/search-buffer)

(use-package! visual-regexp-steroids
  :defer 3
  :config
  (require 'pcre2el)
  (setq vr/engine 'pcre2el)
  (map! "C-c r r" #'vr/replace)
  (map! "C-c r q" #'vr/query-replace))

(after! undo-fu
  (map! :map undo-fu-mode-map "C-?" #'undo-fu-only-redo))

(map! "M-g g" #'avy-goto-line)
(map! "M-g M-g" #'avy-goto-line)

(map! "M-g o" #'counsel-outline)

(after! smartparens
  (defun zz/goto-match-paren (arg)
    "Go to the matching paren/bracket, otherwise (or if ARG is not
    nil) insert %.  vi style of % jumping to matching brace."
    (interactive "p")
    (if (not (memq last-command '(set-mark
                                  cua-set-mark
                                  zz/goto-match-paren
                                  down-list
                                  up-list
                                  end-of-defun
                                  beginning-of-defun
                                  backward-sexp
                                  forward-sexp
                                  backward-up-list
                                  forward-paragraph
                                  backward-paragraph
                                  end-of-buffer
                                  beginning-of-buffer
                                  backward-word
                                  forward-word
                                  mwheel-scroll
                                  backward-word
                                  forward-word
                                  mouse-start-secondary
                                  mouse-yank-secondary
                                  mouse-secondary-save-then-kill
                                  move-end-of-line
                                  move-beginning-of-line
                                  backward-char
                                  forward-char
                                  scroll-up
                                  scroll-down
                                  scroll-left
                                  scroll-right
                                  mouse-set-point
                                  next-buffer
                                  previous-buffer
                                  previous-line
                                  next-line
                                  back-to-indentation
                                  doom/backward-to-bol-or-indent
                                  doom/forward-to-last-non-comment-or-eol
                                  )))
        (self-insert-command (or arg 1))
      (cond ((looking-at "\\s\(") (sp-forward-sexp) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (sp-backward-sexp))
            (t (self-insert-command (or arg 1))))))
  (map! "%" 'zz/goto-match-paren))

(setq org-directory "~/org")

(setq word-wrap-by-category t)

(after! org (setq org-hide-emphasis-markers t))

(after! org (setq org-insert-heading-respect-content nil))

(after! org
  (setq org-log-done t)
  (setq org-log-into-drawer t))

(after! org
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t))

(after! org
  (setq org-use-speed-commands
        (lambda ()
          (and (looking-at org-outline-regexp)
               (looking-back "^\**")))))

;;(add-hook! org-mode (electric-indent-local-mode -1))


(defun zz/adjust-org-company-backends ()
  (remove-hook 'after-change-major-mode-hook '+company-init-backends-h)
  (setq-local company-backends nil))
(add-hook! org-mode (zz/adjust-org-company-backends))

(add-hook! org-mode :append
           'visual-line-mode
           'variable-pitch-mode)

(add-hook! org-mode :append #'org-appear-mode)

;; No auto-fill-mode any more
;; Not friendly for blogging
;;(add-hook 'org-mode-hook 'turn-on-auto-fill)


;;(after! org
;;  (setq org-agenda-files
;;        '("~/gtd" "~/Work/work.org.gpg" "~/org/")))


;;(zz/add-file-keybinding "C-c z w" "~/Work/work.org.gpg" "work.org")
;;(zz/add-file-keybinding "C-c z i" "~/org/ideas.org" "ideas.org")
;;(zz/add-file-keybinding "C-c z p" "~/org/projects.org" "projects.org")
;;(zz/add-file-keybinding "C-c z d" "~/org/diary.org" "diary.org")

(setq org-roam-db-gc-threshold most-positive-fixnum)
;;(setq +org-roam-open-buffer-on-find-file t)

(setq org-latex-listings t)
(setq org-startup-with-latex-preview t)
(with-eval-after-load 'ox-latex
  ;; http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export
  ;; latexmk runs pdflatex/xelatex (whatever is specified) multiple times
  ;; automatically to resolve the cross-references.
  ;; Use tectonic for pdf compilation
  ;; tectonic is not mature enough...
  ;;(setq org-latex-pdf-process '("tectonic -X compile %f -Z shell-escape --outfmt pdf --outdir %o"))
  (add-to-list 'org-latex-classes
               '("elegantpaper"
                 "\\documentclass[lang=cn]{elegantpaper}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
               )
  ;; use listings (not minted) to export code
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  )

(setq citar-symbols
      `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
        (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
        (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
(setq citar-symbol-separator "  ")

(add-hook 'latex-mode-hook #'xenops-mode)
(add-hook 'LaTeX-mode-hook #'xenops-mode)
(add-hook 'org-mode-hook #'xenops-mode)
(setq xenops-reveal-on-entry t
      xenops-image-directory (expand-file-name "xenops/image" user-emacs-directory)
      xenops-math-latex-process 'tectonic
      )
(setq xenops-math-latex-process-alist
      '((dvipng :programs
                ("latex" "dvipng")
                :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
                (1.0 . 1.0)
                :latex-compiler
                ("latex -interaction nonstopmode -shell-escape -output-format dvi -output-directory %o %f")
                :image-converter
                ("dvipng -D %D -T tight -o %O %f"))
        (lualatex :programs ("lualatex" "dvisvgm")
                  :description "dvi > svg"
                  :use-xcolor t
                  :message "you need to install the programs: lualatex and dvisvgm."
                  :image-input-type "dvi"
                  :image-output-type "svg"
                  :image-size-adjust (1.0 . 1.0)
                  :latex-compiler
                  ("lualatex --interaction=nonstopmode --shell-escape --output-format=dvi --output-directory=%o %f")
                  :image-converter
                  ("dvisvgm %f -n -b min -c %S -o %O"))
        (tectonic :programs
                  ("latex" "dvisvgm")
                  :description "xdv > svg"
                  :message "you need to install the programs: tectonic and dvisvgm."
                  :image-input-type "xdv"
                  :image-output-type "svg"
                  :image-size-adjust (0.75 . 0.75)
                  :latex-compiler
                  ("tectonic -X compile %f -Z shell-escape --outfmt xdv --outdir %o")
                  :image-converter
                  ("dvisvgm %f -n -b min -c %S -o %O"))
        (dvisvgm :programs ("xelatex" "dvisvgm")
                 :description "xdv > svg"
                 :message "you need to install the programs: xelatex and dvisvgm."
                 :image-input-type "xdv"
                 :image-output-type "svg"
                 :image-size-adjust (0.52 . 0.52)
                 :latex-compiler
                 ("xelatex -no-pdf -interaction nonstopmode -shell-escape -output-directory %o %f")
                 :image-converter
                 ("dvisvgm %f -n -b min -c %S -o %O"))
        (imagemagick :programs
                     ("latex" "convert")
                     :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
                     (1.0 . 1.0)
                     :latex-compiler
                     ("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f")
                     :image-converter
                     ("convert -density %D -trim -antialias %f -quality 100 %O"))))

(defun zz/org-download-paste-clipboard (&optional use-default-filename)
  (interactive "P")
  (require 'org-download)
  (let ((file
         (if (not use-default-filename)
             (read-string (format "Filename [%s]: "
                                  org-download-screenshot-basename)
                          nil nil org-download-screenshot-basename)
           nil)))
    (org-download-clipboard file)))

(after! org
  (setq org-download-method 'directory)
  ;;(setq org-download-image-dir "images")
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-image-actual-width nil)
  (map! :map org-mode-map
        "C-c l a y" #'zz/org-download-paste-clipboard
        "C-M-y" #'zz/org-download-paste-clipboard))

(map! :after counsel :map org-mode-map
      "C-c l l h" #'counsel-org-link)

;;(after! counsel
;;  (setq counsel-outline-display-style 'title))

(after! org-id
  ;; Do not create ID if a CUSTOM_ID exists
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))

(defun zz/make-id-for-title (title)
  "Return an ID based on TITLE."
  (let* ((new-id (replace-regexp-in-string "[^[:alnum:]]" "-" (downcase title))))
    new-id))

(defun zz/org-custom-id-create ()
  "Create and store CUSTOM_ID for current heading."
  (let* ((title (or (nth 4 (org-heading-components)) ""))
         (new-id (zz/make-id-for-title title)))
    (org-entry-put nil "CUSTOM_ID" new-id)
    (org-id-add-location new-id (buffer-file-name (buffer-base-buffer)))
    new-id))

(defun zz/org-custom-id-get-create (&optional where force)
  "Get or create CUSTOM_ID for heading at WHERE.

If FORCE is t, always recreate the property."
  (org-with-point-at where
    (let ((old-id (org-entry-get nil "CUSTOM_ID")))
      ;; If CUSTOM_ID exists and FORCE is false, return it
      (if (and (not force) old-id (stringp old-id))
          old-id
        ;; otherwise, create it
        (zz/org-custom-id-create)))))

;; Now override counsel-org-link-action
(after! counsel
  (defun counsel-org-link-action (x)
    "Insert a link to X.

X is expected to be a cons of the form (title . point), as passed
by `counsel-org-link'.

If X does not have a CUSTOM_ID, create it based on the headline
title."
    (let* ((id (zz/org-custom-id-get-create (cdr x))))
      (org-insert-link nil (concat "#" id) (car x)))))

(when IS-MAC
  (use-package! org-mac-link
    :after org
    :config
    (setq org-mac-grab-Acrobat-app-p nil) ; Disable grabbing from Adobe Acrobat
    (setq org-mac-grab-devonthink-app-p nil) ; Disable grabbinb from DevonThink
    (map! :map org-mode-map
          "C-c g"  #'org-mac-grab-link)))

(after! org-agenda
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          ;; Indent todo items by level to show nesting
          (todo . " %i %-12:c%l")
          (tags . " %i %-12:c")
          (search . " %i %-12:c")))
  (setq org-agenda-include-diary t))

(use-package! org-super-agenda
  :after org-agenda
  :config
  (setq org-super-agenda-groups '((:auto-dir-name t)))
  (org-super-agenda-mode))

(use-package! org-archive
  :after org
  :config
  (setq org-archive-location "archive.org::datetree/"))

(after! org-clock
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate))

(use-package! org-gtd
  :after org
  :config
  ;; where org-gtd will put its files. This value is also the default one.
  (setq org-gtd-directory "~/gtd/")
  ;; package: https://github.com/Malabarba/org-agenda-property
  ;; this is so you can see who an item was delegated to in the agenda
  (setq org-agenda-property-list '("DELEGATED_TO"))
  ;; I think this makes the agenda easier to read
  (setq org-agenda-property-position 'next-line)
  ;; package: https://www.nongnu.org/org-edna-el/
  ;; org-edna is used to make sure that when a project task gets DONE,
  ;; the next TODO is automatically changed to NEXT.
  (setq org-edna-use-inheritance t)
  (org-edna-load)
  :bind
  (("C-c d c" . org-gtd-capture) ;; add item to inbox
   ("C-c d a" . org-agenda-list) ;; see what's on your plate today
   ("C-c d p" . org-gtd-process-inbox) ;; process entire inbox
   ("C-c d n" . org-gtd-show-all-next) ;; see all NEXT items
   ;; see projects that don't have a NEXT item
   ("C-c d s" . org-gtd-show-stuck-projects)
   ;; the keybinding to hit when you're done editing an item in the
   ;; processing phase
   ("C-c d f" . org-gtd-clarify-finalize)))

(after! (org-gtd org-capture)
  (add-to-list 'org-capture-templates
               '("i" "GTD item"
                 entry
                 (file (lambda () (org-gtd--path org-gtd-inbox-file-basename)))
                 "* %?\n%U\n\n  %i"
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("l" "GTD item with link to where you are in emacs now"
                 entry
                 (file (lambda () (org-gtd--path org-gtd-inbox-file-basename)))
                 "* %?\n%U\n\n  %i\n  %a"
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("m" "GTD item with link to current Outlook mail message"
                 entry
                 (file (lambda () (org-gtd--path org-gtd-inbox-file-basename)))
                 "* %?\n%U\n\n  %i\n  %(org-mac-outlook-message-get-links)"
                 :kill-buffer t)))

(defadvice! +zz/load-org-gtd-before-capture (&optional goto keys)
    :before #'org-capture
    (require 'org-capture)
    (require 'org-gtd))

(use-package! org-transclusion
  :defer
  :after org
  :init
  (map!
   :map global-map "<f12>" #'org-transclusion-add
   :leader
   :prefix "n"
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))

;;(use-package! ox-awesomecv
;;  :after org)
;;(use-package! ox-moderncv
;;  :after org)

;;(use-package! ox-leanpub
;;  :after org
;;  :config
;;  (require 'ox-leanpub-markdown)
;;  (org-leanpub-book-setup-menu-markdown))

(after! ox-hugo
  (setq org-hugo-use-code-for-kbd t))

(defun zz/org-if-str (str &optional desc)
  (when (org-string-nw-p str)
    (or (org-string-nw-p desc) str)))

(defun zz/org-macro-hsapi-code (module &optional func desc)
  (org-link-make-string
   (concat "https://www.hammerspoon.org/docs/"
           (concat module (zz/org-if-str func (concat "#" func))))
   (or (org-string-nw-p desc)
       (format "=%s="
               (concat module
                       (zz/org-if-str func (concat "." func)))))))

(defun zz/org-macro-keys-code-outer (str)
  (mapconcat (lambda (s)
               (concat "~" s "~"))
             (split-string str)
             (concat (string ?\u200B) "+" (string ?\u200B))))
(defun zz/org-macro-keys-code-inner (str)
  (concat "~" (mapconcat (lambda (s)
                           (concat s))
                         (split-string str)
                         (concat (string ?\u200B) "-" (string ?\u200B)))
          "~"))
(defun zz/org-macro-keys-code (str)
  (zz/org-macro-keys-code-inner str))

(defun zz/org-macro-luadoc-code (func &optional section desc)
  (org-link-make-string
   (concat "https://www.lua.org/manual/5.3/manual.html#"
           (zz/org-if-str func section))
   (zz/org-if-str func desc)))

(defun zz/org-macro-luafun-code (func &optional desc)
  (org-link-make-string
   (concat "https://www.lua.org/manual/5.3/manual.html#"
           (concat "pdf-" func))
   (zz/org-if-str (concat "=" func "()=") desc)))

(defun zz/org-reformat-buffer ()
  (interactive)
  (when (y-or-n-p "Really format current buffer? ")
    (let ((document (org-element-interpret-data (org-element-parse-buffer))))
      (erase-buffer)
      (insert document)
      (goto-char (point-min)))))

(use-package org-pandoc-import)

(defun zz/org-current-headline-number ()
  "Get the numbering of the innermost headline which contains the
cursor. Returns nil if the cursor is above the first level-1
headline, or at the very end of the file. Does not count
headlines tagged with :noexport:"
  (require 'org-num)
  (let ((org-num--numbering nil)
        (original-point (point)))
    (save-mark-and-excursion
      (let ((new nil))
        (org-map-entries
         (lambda ()
           (when (org-at-heading-p)
             (let* ((level (nth 1 (org-heading-components)))
                    (numbering (org-num--current-numbering level nil)))
               (let* ((current-subtree (save-excursion (org-element-at-point)))
                      (point-in-subtree
                       (<= (org-element-property :begin current-subtree)
                           original-point
                           (1- (org-element-property :end current-subtree)))))
                 ;; Get numbering to current headline if the cursor is in it.
                 (when point-in-subtree (push numbering
                                              new))))))
         "-noexport")
        ;; New contains all the trees that contain the cursor (i.e. the
        ;; innermost and all its parents), so we only return the innermost one.
        ;; We reverse its order to make it more readable.
        (reverse (car new))))))

(require 'ox-reveal)

;;(use-package! ox-jira
;;  :after org)

;;(make-directory "~/.org-jira" 'ignore-if-exists)
;;(setq jiralib-url "https://jira.swisscom.com/")

(use-package! org-ml
  :after org)

(use-package! org-ql
  :after org)

(defun zz/headings-with-tags (file tags)
  (let ((headings (org-ql-select file
                    `(tags-local ,@tags))))
    (mapconcat
     (lambda (l) (format "- %s" l))
     (mapcar
      (lambda (h)
        (let ((title (car (org-element-property :title h))))
          (org-link-make-string
           (format "file:%s::*%s"
                   file title)
           title)))
      headings) "\n")))

(defun zz/headings-with-current-tags (file)
  (let ((tags (s-split ":" (cl-sixth (org-heading-components)) t)))
    (zz/headings-with-tags file tags)))

;(add-to-list 'load-path "~/sdk/app/emacs-application-framework")
;(require 'eaf)
;(require 'eaf-org-previewer)

(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun vr/sp-enclose-next-sexp (num)
  (interactive "p")
  (insert-parentheses (or num 1)))

(after! smartparens
  (add-hook! (clojure-mode
              emacs-lisp-mode
              lisp-mode
              cider-repl-mode
              racket-mode
              racket-repl-mode) :append #'smartparens-strict-mode)
  (add-hook! smartparens-mode :append #'sp-use-paredit-bindings)
  (map! :map (smartparens-mode-map smartparens-strict-mode-map)
        "M-(" #'vr/sp-enclose-next-sexp))

(after! prog-mode
  (map! :map prog-mode-map "C-h C-f" #'find-function-at-point)
  (map! :map prog-mode-map
        :localleader
        :desc "Find function at point"
        "g p" #'find-function-at-point))

;;(use-package! cfengine
;;  :defer t
;;  :commands cfengine3-mode
;;  :mode ("\\.cf\\'" . cfengine3-mode))

(use-package! graphviz-dot-mode)

(setq
 ghc-ghc-options '("-fno-warn-missing-signatures")
 haskell-interactive-popup-errors nil
 )
(after!
  (setq lsp-haskell-formatting-provider "ormolu"))

(after! rustic
  (setq rustic-lsp-server 'rust-analyzer)
  (setq lsp-rust-analyzer-cargo-watch-command "clippy")
  (setq lsp-rust-analyzer-cargo-load-out-dirs-from-check t)
  (setq lsp-rust-analyzer-proc-macro-enable t)
  (setq lsp-rust-analyzer-display-chaining-hints t)
  (setq lsp-rust-analyzer-display-parameter-hints t)
  (setq lsp-rust-analyzer-server-display-inlay-hints t)
  (setq lsp-rust-all-features t)
  ;; (setq lsp-rust-full-docs t)
  (setq lsp-enable-semantic-highlighting t))

(setq +latex-viewers '(pdf-tools))
(setq pdf-view-use-scaling t
      pdf-view-use-imagemagick nil
      ;;pdf-view-resize-factor 10
      )
(setq-default TeX-engine 'xetex
              TeX-PDF-mode t)

(with-eval-after-load 'font-latex
  (set-face-attribute 'font-latex-sedate-face nil :inherit 'fixed-pitch)
  (set-face-attribute 'font-latex-math-face nil :inherit 'fixed-pitch)
  (set-face-attribute 'font-latex-math-face nil :background (face-attribute 'default :background))
  ;(set-face-attribute 'org-block nil :background (face-attribute 'default :background))
  )

(defun set-latex-background-same-with-default ()
  "Set inline latex color correctly"
  (interactive)
  (set-face-attribute 'font-latex-sedate-face nil :inherit 'fixed-pitch)
  (set-face-attribute 'font-latex-math-face nil :background (face-attribute 'default :background))
  ;(set-face-attribute 'org-block nil :background (face-attribute 'default :background))
  )

;(add-hook 'org-mode-hook 'set-latex-background-same-with-default)
(add-hook 'LaTeX-mode-hook #'variable-pitch-mode)

(use-package pdf-tools
  :config
  (setq-default pdf-view-display-size 'fit-width)
  )

(setq TeX-source-correlate-start-server t)
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)

;(add-hook 'org-mode-hook 'org-fragtog-mode)

(setq org-preview-latex-process-alist
      '((dvipng :programs
                ("lualatex" "dvipng")
                :description "dvi > png"
                :message "you need to install the programs: latex and dvipng."
                :image-input-type "dvi"
                :image-output-type "png"
                :image-size-adjust (1.0 . 1.0)
                :latex-compiler
                ("latex -interaction nonstopmode -output-directory %o %f")
                :image-converter
                ("dvipng -D %D -T tight -o %O %f")
                :transparent-image-converter
                ("dvipng -D %D -T tight -bg Transparent -o %O %f"))
        (dvisvgm :programs
                 ("xelatex" "dvisvgm")
                 :description "xdv > svg"
                 :message "you need to install the programs: xelatex and dvisvgm."
                 :image-input-type "xdv"
                 :image-output-type "svg"
                 :image-size-adjust (0.5 . 0.5)
                 :latex-compiler
                 ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
                 :image-converter
                 ("dvisvgm %f -n -b min -c %S -o %O"))
        (tectonic :programs
                  ("latex" "dvisvgm")
                  :description "xdv > svg"
                  :message "you need to install the programs: tectonic and dvisvgm."
                  :image-input-type "xdv"
                  :image-output-type "svg"
                  :image-size-adjust (1.7 . 1.5)
                  :latex-compiler
                  ("xelatex %f --outfmt xdv --pass tex -output-directory %o")
                  :image-converter
                  ("dvisvgm %f -n -b min -c %S -o %O"))
        (imagemagick :programs
                     ("latex" "convert")
                     :description "pdf > png"
                     :message "you need to install the programs: latex and imagemagick."
                     :image-input-type "pdf"
                     :image-output-type "png"
                     :image-size-adjust (1.0 . 1.0)
                     :latex-compiler
                     ("pdflatex -interaction nonstopmode -output-directory %o %f")
                     :image-converter
                     ("convert -density %D -trim -antialias %f -quality 100 %O")))
      )

(setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
;;(add-to-list 'org-latex-packages-alist '("" "unicode-math"))
(setq org-preview-latex-default-process 'dvisvgm)
(setq org-latex-compiler "xelatex")

(use-package! laas
  :hook (org-mode . laas-mode)
  :config
  ;; 不自动插入空格
  (setq laas-enable-auto-space nil)
  (aas-set-snippets 'laas-mode
                    ;; 只在 org latex 片段中展开
                    :cond #'org-inside-LaTeX-fragment-p
                    "tan" "\\tan"
                    ;; 内积
                    "i*" (lambda () (interactive)
                           (yas-expand-snippet "\\langle $1\\rangle$0"))
                    "sr" "^2"
                    ;; 还可以绑定函数，和 yasnippet 联动
                    "Sum" (lambda () (interactive)
                            (yas-expand-snippet "\\sum_{$1}^{$2} $0"))
                    ;; 这是 laas 中定义的用于包裹式 latex 代码的函数，实现 \bm{a}
                    :cond #'laas-object-on-left-condition
                    ",." (lambda () (interactive) (laas-wrap-previous-object "bm"))
                    ".," (lambda () (interactive) (laas-wrap-previous-object "bm"))))

;;(add-to-list 'load-path "~/sdk/app/popweb")
;;(add-to-list 'load-path "~/sdk/app/popweb/extension/latex")
;;(require 'popweb-latex)
;;(add-hook 'latex-mode-hook #'popweb-latex-mode)

;;(setq dummy-citar-bibliography (concat org-directory "/library.bib"))
(setq! citar-bibliography '("/home/vitalyr/org/library.bib"))
(setq! citar-library-paths '("/home/vitalyr/Zotero/storage")
       citar-notes-paths '(org-directory))
(setq org-cite-global-bibliography citar-bibliography)

(setq-default preview-default-document-pt 22)
;;(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)

(setq lsp-file-watch-threshold 1000
      lsp-ui-doc-position "Bottom"
      lsp-ui-peek-enable t
      lsp-ui-doc-enable nil
      lsp-ui-imenu-enable t
      lsp-ui-sideline-enable nil
      lsp-ui-sideline-ignore-duplicate t)

(add-hook 'doom-first-file-hook #'auto-image-file-mode)
(auto-image-file-mode 1)

(use-package! org-roam-protocol
  :after org-protocol)

(use-package! org-roam-bibtex
  :after org-roam
  :config
  (require 'org-ref))
;; set org-id-method
(setq org-id-method 'ts)

(after! org
  (setq org-attach-dir-relative t)
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "daily/%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n")))))
;;(set-company-backend! 'org-mode '(company-capf))
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  :hook (org-roam . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
;; start org-roam-ui-mode when emacs launches
;;(org-roam-ui-mode)

;;(setq default-input-method "rime")
(setq rime-user-data-dir "~/.config/input_method/rime")
(setq rime-show-candidate 'posframe)
(setq rime-disable-predicates
      '(rime-predicate-evil-mode-p
        rime-predicate-after-alphabet-char-p ;; 当光标处于紧挨着字母的位置时，自动由中文切换为英文
        rime-predicate-prog-in-code-p))

(setq rime-posframe-properties
      (list :font "sarasa ui sc"
            :internal-border-width 10))

(setq rime--popup 1)
(setq rime-show-preedit 1)
(setq rime-posframe-fixed-position t)

(use-package! valign
  :init
  (require 'valign)
  :hook
  ('org-mode . #'valign-mode))


(setq-hook! 'LaTeX-mode-hook +spellcheck-immediately nil)

(require 'org)

;;(use-package org-latex-impatient
;  :defer t
;  :hook (org-mode . org-latex-impatient-mode)
;  :init
;  (setq org-latex-impatient-tex2svg-bin "tex2svg")
  ;; (setq org-latex-impatient-scale 1)
;  (setq org-latex-impatient-delay 0.2))


;;(setq org-format-latex-options (plist-put org-format-latex-options :scale 0.5))
;;(setq org-format-latex-options (plist-put org-format-latex-options :background 'auto))

(global-hl-line-mode nil)

(load-file (let ((coding-system-for-read 'utf-8))
             (shell-command-to-string "agda-mode locate")))

(require 'deft)
(setq deft-directory org-directory)


(add-hook 'prog-mode-hook #'wucuo-start)
(add-hook 'text-mode-hook #'wucuo-start)

;; to speed up company
(setq company-idle-delay 0)

;;(setq org-superstar-headline-bullets-list '("◉" "○" "◈" "◇" "▣" "□"))
;;(transwin-toggle-transparent-frame)

;; disable tabnine
;;(use-package company-tabnine)
;;(require 'company-tabnine)
;;(add-to-list 'company-backends #'company-tabnine)

;; Number the candidates (use M-1, M-2 etc to select completions).
(setq company-show-numbers t)
;; use aspell as ispell backend
(setq-default ispell-program-name "aspell")
;; use American English as ispell default dictionary
(ispell-change-dictionary "american" t)


(add-to-list 'load-path "/home/vitalyr/.opam/default/share/emacs/site-lisp")
(require 'ocp-indent)

;;(use-package! org-xournal
;; TODO: re-enable this
;; disable this to debug
;; :hook (org-mode . org-xournal-mode)
;;  :config
;;  (setq org-xournal-note-dir "~/nutstore_files/Notebook/xournalpp"  ;; xopp 笔记存储目录
;;        org-xournal-template-dir "~/nutstore_files/Notebook/xournalpp/templates" ;; xournal 目标文件存储目录
;;        org-xournal-default-template-name "template.xopp" ;; 默认笔记模版名称，应该位于 org-xournal-template-dir
;;        org-xournal-bin "xournalpp" ;; xournal 执行文件        )
;;  )

(use-package! org-krita
  :config
  (add-hook 'org-mode-hook 'org-krita-mode))

;;(load "/home/vitalyr/.opam/default/share/emacs/site-lisp/tuareg-site-file")

;; helm-bibtex related stuff
;;(after! helm
;;  (use-package helm-bibtex
;;    :custom
;;    ;; In the lines below I point helm-bibtex to my default library file.
;;    (bibtex-completion-bibliography '("~/projects/learn/Notebook/org/library.bib"))
;;    (reftex-default-bibliography '("~/projects/learn/Notebook/org/library.bib"))
;; The line below tells helm-bibtex to find the path to the pdf
;; in the "file" field in the .bib file.
;;    (bibtex-completion-pdf-field "file")
;;    :hook (Tex . (lambda () (define-key Tex-mode-map "\C-ch" 'helm-bibtex))))
;; I also like to be able to view my library from anywhere in emacs, for example if I want to read a paper.
;; I added the keybind below for that.
;;  (map! :leader
;;        :desc "Open literature database"
;;        "o l" #'helm-bibtex)
;; And I added the keybinds below to make the helm-menu behave a bit like the other menus in emacs behave with evil-mode.
;; Basically, the keybinds below make sure I can scroll through my list of references with C-j and C-k.
;;  (map! :map helm-map
;;        "C-j" #'helm-next-line
;;        "C-k" #'helm-previous-line )
;;  )

;; (setq org-ref-default-bibliography '("~/projects/learn/Notebook/org/library.bib"))
;; (setq reftex-default-bibliography '("~/projects/learn/Notebook/org/library.bib"))


;; The default citation type of org-ref is cite:, but I use citep: much more often
;; I therefore changed the default type to the latter.
;; (org-ref-default-citation-link "citep")

;; The function below allows me to consult the pdf of the citation I currently have my cursor on.
(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (funcall org-ref-get-pdf-filename-function key)))
    (if (file-exists-p pdf-file)
        (find-file pdf-file)
      (message "No PDF found for %s" key))))
(setq bibtex-completion-bibliography '("~/projects/learn/Notebook/org/library.bib"
		                       ;;"~/Dropbox/emacs/bibliography/dei.bib"
			               ;; "~/Dropbox/emacs/bibliography/master.bib"
			               ;;"~/Dropbox/emacs/bibliography/archive.bib"
                                       )
      ;;bibtex-completion-library-path '("~/Dropbox/emacs/bibliography/bibtex-pdfs/")
      ;;bibtex-completion-notes-path "~/Dropbox/emacs/bibliography/notes/"
      bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

      bibtex-completion-additional-search-fields '(keywords)
      bibtex-completion-display-formats
      '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
        (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
        (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
        (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
        (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
      bibtex-completion-pdf-open-function
      (lambda (fpath)
        (call-process "open" nil 0 nil fpath)))

(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5
      org-ref-bibtex-hydra-key-binding (kbd "H-b"))

(setq-default org-download-image-dir (concat org-directory "/attach/pictures"))
(use-package org-download
  :after org
  :defer nil
  :custom
  (org-download-method 'directory) ;;(org-download-image-dir "images") (org-download-heading-lvl nil) (org-download-timestamp "%Y%m%d-%H%M%S_") ;;(org-download-screenshot-method "/usr/local/bin/pngpaste %s") ;;:bind ;;("C-M-y" . org-download-screenshot) (setq org-download-image-attr-list '("#+attr_html: :width 80% :height 70% :align center"))
  :config
  (require 'org-download))

(add-hook 'artist-mode-hook (lambda () (display-line-numbers-mode -1)))

(rg-enable-default-bindings)

(use-package wakatime-mode)
(global-wakatime-mode)

;;(use-package! emacs-everywhere
;;  :config
;;  (setq emacs-everywhere-major-mode-function #'org-mode))

(after! magit
  (setq zz/repolist
        "~/.elvish/package-data/elvish-themes/chain-summary-repos.json")
  (defadvice! +zz/load-magit-repositories ()
    :before #'magit-list-repositories
    (setq magit-repository-directories
          (seq-map (lambda (e) (cons e 0)) (json-read-file zz/repolist))))
  (setq magit-repolist-columns
        '(("Name" 25 magit-repolist-column-ident nil)
          ("Status" 7 magit-repolist-column-flag nil)
          ("B<U" 3 magit-repolist-column-unpulled-from-upstream
           ((:right-align t)
            (:help-echo "Upstream changes not in branch")))
          ("B>U" 3 magit-repolist-column-unpushed-to-upstream
           ((:right-align t)
            (:help-echo "Local changes not in upstream")))
          ("Path" 99 magit-repolist-column-path nil))))

;;(after! epa
;;  (set (if EMACS27+
;;           'epg-pinentry-mode
;;         'epa-pinentry-mode) ; DEPRECATED `epa-pinentry-mode'
;;       nil))

(use-package! iedit
  :defer
  :config
  (set-face-background 'iedit-occurrence "Magenta")
  :bind
  ("C-;" . iedit-mode))

(defmacro zz/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

;;(setq vterm-shell "/usr/local/bin/elvish")

(use-package! unfill
  :defer t
  :bind
  ("M-q" . unfill-toggle)
  ("A-q" . unfill-paragraph))

(add-to-list 'load-path "/home/vitalyr/projects/learn/Emacs/greeting")
(require 'greeting)
(greeting-say-hello "Emacs")
